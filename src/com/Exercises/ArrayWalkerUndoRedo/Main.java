package com.Exercises.ArrayWalkerUndoRedo;

import java.util.Scanner;

public class Main {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        String[][] map = new String[10][10];
        String[] moves = new String[0];
        for(int x = 0; x < map.length; x++){
            for(int y = 0; y < map[x].length; y++){
                map[x][y] = ".";
            }
        }
        String move = "";
        Position pos = new Position();
        int i = 65;
        String currPos = String.valueOf((char)i);
        map[0][0] = currPos;
        printMap(map);

        while(validMove(move) == true){
            System.out.print("Enter direction command: ");
            System.out.println();
            //System.out.println("8 = north , 6 = east, 2 = south, 4 = west");
            move = sc.nextLine();
            addMoves(move, moves);
            switch(move){
                case "8": //north
                    pos.x--;
                    if(validPos(pos.x, pos.y, map) == false){
                        System.out.println("You cannot go there!");
                        pos.x++;
                        break;
                    } else{
                        i++;
                        if(i > 90){i = 65;}
                        map[pos.x][pos.y] = String.valueOf((char)i);
                        printMap(map);
                    }
                    break;
                case "6": // east
                    pos.y++;
                    if(validPos(pos.x, pos.y, map) == false){
                        System.out.println("You cannot go there!");
                        pos.y--;
                        break;
                    } else{
                        i++;
                        if(i > 90){i = 65;}
                        map[pos.x][pos.y] = String.valueOf((char)i);
                        printMap(map);
                    }
                    break;
                case "2": // south
                    pos.x++;
                    if(validPos(pos.x, pos.y, map) == false){
                        System.out.println("You cannot go there!");
                        pos.x--;
                        break;
                    } else{
                        i++;
                        if(i > 90){i = 65;}
                        map[pos.x][pos.y] = String.valueOf((char)i);
                        printMap(map);
                    }
                    break;
                case "4": // west
                    pos.y--;
                    if(validPos(pos.x, pos.y, map) == false){
                        System.out.println("You cannot go there!");
                        pos.y++;
                        break;
                    } else{
                        i++;
                        if(i > 90){i = 65;}
                        map[pos.x][pos.y] = String.valueOf((char)i);
                        printMap(map);
                    }
                    break;
                case "7": //undo

                    break;
                case "9": //redo

                    break;
            }
        }

    }

    private static String[] addMoves(String move, String[] moves) {
        moves = new String[moves.length+1];
        moves[moves.length] = move;
        return moves;
    }

    public static boolean validPos(int x, int y, String[][] map) {
        if (x < 0 || x > 9 || y < 0 || y > 9 || map[x][y] != ".") {
            return false;
        }
        return true;
    }

    public static boolean validMove(String move){
        if(move.equals("#") || move.equals("9") || move.equals("8") || move.equals("7") ||  move.equals("6") || move.equals("4") || move.equals("2") || move.equals("")){
            return true;
        }
        return false;
    }

    private static void printMap(String[][] map) {
        for(int x = 0; x < map.length; x++){
            for (int y = 0; y < map[x].length; y++){
                System.out.printf("%s", map[x][y]);
            }
            System.out.println();
        }
    }
}

class Position{
    int x = 0;
    int y = 0;
}


/*
Extend your [ArrayWalker] to support undo and redo commands.
Introduction and Assignment

Include the two commands (7 = undo, 9 = redo) in your ArrayWalker solution.

It must be possible to undo all steps until the starting position.
With redo you can undo undo operations.
If, for example, the last N commands were undos it must be possible to undo those N undos.
If there is no undo operation to undo (because the previous command was not undo) simply repeat the last command.
(see also examples).

If there are no more commands to undo the message “Nothing to undo!” is displayed (but not the field).
If there are no more commands to redo the message “Nothing to redo!” is displayed (but not the field).
This is only the case at the very start.

Implement a stack to store the command history and the undo history.
Examples

(Text in red = user input)
Simple Undo

    A.........
    ..........
    ..........
    ..........
    ..........
    ..........
    ..........
    ..........
    ..........
    ..........
    Enter direction command: 2

    A.........
    B.........
    ..........
    ..........
    ..........
    ..........
    ..........
    ..........
    ..........
    ..........
    Enter direction command: 6

    A.........
    BC........
    ..........
    ..........
    ..........
    ..........
    ..........
    ..........
    ..........
    ..........
    Enter direction command: 8

    AD........
    BC........
    ..........
    ..........
    ..........
    ..........
    ..........
    ..........
    ..........
    ..........
    Enter direction command: 7

    A.........
    BC........
    ..........
    ..........
    ..........
    ..........
    ..........
    ..........
    ..........
    ..........

    Enter direction command: 7
    A.........
    B.........
    ..........
    ..........
    ..........
    ..........
    ..........
    ..........
    ..........
    ..........

    Enter direction command: 7
    A.........
    ..........
    ..........
    ..........
    ..........
    ..........
    ..........
    ..........
    ..........
    ..........
    Enter direction command: 7

    Nothing to undo!
    Enter direction command: 5

Simple Redo

    A.........
    ..........
    ..........
    ..........
    ..........
    ..........
    ..........
    ..........
    ..........
    ..........
    Enter direction command: 6

    AB........
    ..........
    ..........
    ..........
    ..........
    ..........
    ..........
    ..........
    ..........
    ..........
    Enter direction command: 2

    AB........
    .C........
    ..........
    ..........
    ..........
    ..........
    ..........
    ..........
    ..........
    ..........
    Enter direction command: 9

    AB........
    .C........
    .D........
    ..........
    ..........
    ..........
    ..........
    ..........
    ..........
    ..........
    Enter direction command: 9

    AB........
    .C........
    .D........
    .E........
    ..........
    ..........
    ..........
    ..........
    ..........
    ..........
    Enter direction command: 9

    AB........
    .C........
    .D........
    .E........
    .F........
    ..........
    ..........
    ..........
    ..........
    ..........
    Enter direction command: 5

Undo - Redo

    A.........
    ..........
    ..........
    ..........
    ..........
    ..........
    ..........
    ..........
    ..........
    ..........
    Enter direction command: 2

    A.........
    B.........
    ..........
    ..........
    ..........
    ..........
    ..........
    ..........
    ..........
    ..........
    Enter direction command: 2

    A.........
    B.........
    C.........
    ..........
    ..........
    ..........
    ..........
    ..........
    ..........
    ..........
    Enter direction command: 6

    A.........
    B.........
    CD........
    ..........
    ..........
    ..........
    ..........
    ..........
    ..........
    ..........
    Enter direction command: 6

    A.........
    B.........
    CDE.......
    ..........
    ..........
    ..........
    ..........
    ..........
    ..........
    ..........
    Enter direction command: 7

    A.........
    B.........
    CD........
    ..........
    ..........
    ..........
    ..........
    ..........
    ..........
    ..........
    Enter direction command: 7

    A.........
    B.........
    C.........
    ..........
    ..........
    ..........
    ..........
    ..........
    ..........
    ..........
    Enter direction command: 9

    A.........
    B.........
    CD........
    ..........
    ..........
    ..........
    ..........
    ..........
    ..........
    ..........
    Enter direction command: 9

    A.........
    B.........
    CDE.......
    ..........
    ..........
    ..........
    ..........
    ..........
    ..........
    ..........
    Enter direction command: 7

    A.........
    B.........
    CD........
    ..........
    ..........
    ..........
    ..........
    ..........
    ..........
    ..........
    Enter direction command: 7

    A.........
    B.........
    C.........
    ..........
    ..........
    ..........
    ..........
    ..........
    ..........
    ..........
    Enter direction command: 2

    A.........
    B.........
    C.........
    D.........
    ..........
    ..........
    ..........
    ..........
    ..........
    ..........
    Enter direction command: 9

    A.........
    B.........
    C.........
    D.........
    E.........
    ..........
    ..........
    ..........
    ..........
    ..........
    Enter direction command: 5

 */